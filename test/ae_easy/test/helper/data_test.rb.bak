require 'test_helper'

describe "data helper" do
  before do
    @sample_data = {
      content: '<html><body><h1 id="title">Hello world</h1><p id="content">This is the content.</p></body></html>',
      page: {"gid" => "p1", "url" => "https://a.example.com/abc", "headers" => {"Referer" => "https://a.example.com", "Cookie" => "abc:1" }},
      pages: [
        {"gid" => "p2", "url" => "https://b.example.com/abc", "headers" => {"Referer" => "https://b.example.com", "Cookie" => "abc:2" }},
        {"gid" => "p3", "url" => "https://c.example.com/abc", "headers" => {"Referer" => "https://c.example.com", "Cookie" => "abc:3" }}
      ],
      outputs: [
        {"_id" => "o1", "data_a" => "a1", "data_b" => "b1"},
        {"_id" => "o2", "data_a" => "a2", "data_b" => "b2"}
      ],
      expected_pages: [
        {"gid" => "p2", "url" => "https://b.example.com/abc", "headers" => {"Referer" => "https://b.example.com", "Cookie" => "abc:2" }},
        {"gid" => "p3", "url" => "https://c.example.com/abc", "headers" => {"Referer" => "https://c.example.com", "Cookie" => "abc:3" }},
        {"gid" => "p4", "url" => "https://d.example.com/abc", "headers" => {"Referer" => "https://d.example.com", "Cookie" => "abc:4" }}
      ],
      expected_outputs: [
        {"_id" => "o1", "data_a" => "a1", "data_b" => "b1"},
        {"_id" => "o2", "data_a" => "a2", "data_b" => "b2"},
        {"_id" => "o3", "data_a" => "a3", "data_b" => "b3"}
      ]
    }
    @write_to_file = lambda do |directory, file_name, contents|
      File.open(File.join(directory, file_name), 'w', encoding: 'UTF-8') do |f|
        f.write contents
      end
    end
    @write_json_to_file = lambda do |directory, file_name, contents, block|
      json_dump = contents.nil? ? '' : JSON.dump(contents)
      @write_to_file.call directory, "#{file_name}.json", json_dump
    end
    @temp_dir = $TEST_TEMP_DIR
  end

  it "should load empty json files as single item correctly" do
    Dir.mktmpdir(nil, @temp_dir) do |input_dir|
      @write_to_file.call input_dir, 'page.json', ''
      data = AeEasy::Test::Helper::Data.new({
        input_absolute: true,
        input: input_dir
      })
      assert_operator data.scraper_page, :==, nil
    end
  end

  it "should load empty json files as multiple items correctly" do
    Dir.mktmpdir(nil, @temp_dir) do |input_dir|
      @write_to_file.call input_dir, 'expected_outputs.json', ''
      data = AeEasy::Test::Helper::Data.new({
        input_absolute: true,
        input: input_dir
      })
      assert_operator data.expected_outputs, :==, []
    end
  end

  it "should load content correctly" do
    Dir.mktmpdir(nil, @temp_dir) do |input_dir|
      @write_to_file.call input_dir, 'content', @sample_data[:content]
      data = AeEasy::Test::Helper::Data.new({
        input_absolute: true,
        input: input_dir
      })
      assert_operator data.content, :==, @sample_data[:content]
    end
  end

  it "should load page correctly" do
    Dir.mktmpdir(nil, @temp_dir) do |input_dir|
      @write_json_to_file.call input_dir, 'page', @sample_data[:page]
      data = AeEasy::Test::Helper::Data.new({
        input_absolute: true,
        input: input_dir
      })
      assert_operator data.scraper_page, :==, @sample_data[:page]
    end
  end

  it "should load pages correctly" do
    Dir.mktmpdir(nil, @temp_dir) do |input_dir|
      @write_json_to_file.call input_dir, 'pages', @sample_data[:pages]
      data = AeEasy::Test::Helper::Data.new({
        input_absolute: true,
        input: input_dir
      })
      assert_operator data.scraper_pages, :==, @sample_data[:pages]
    end
  end

  it "should load outputs correctly" do
    Dir.mktmpdir(nil, @temp_dir) do |input_dir|
      @write_json_to_file.call input_dir, 'outputs', @sample_data[:outputs]
      data = AeEasy::Test::Helper::Data.new({
        input_absolute: true,
        input: input_dir
      })
      assert_operator data.scraper_outputs, :==, @sample_data[:outputs]
    end
  end

  it "should load expected_pages correctly" do
    Dir.mktmpdir(nil, @temp_dir) do |input_dir|
      @write_json_to_file.call input_dir, 'expected_pages', @sample_data[:expected_pages]
      data = AeEasy::Test::Helper::Data.new({
        input_absolute: true,
        input: input_dir
      })
      assert_operator data.expected_pages, :==, @sample_data[:expected_pages]
    end
  end

  it "should load outputs correctly" do
    Dir.mktmpdir(nil, @temp_dir) do |input_dir|
      @write_json_to_file.call input_dir, 'expected_outputs', @sample_data[:expected_outputs]
      data = AeEasy::Test::Helper::Data.new({
        input_absolute: true,
        input: input_dir
      })
      assert_operator data.expected_outputs, :==, @sample_data[:expected_outputs]
    end
  end

  it "should match element and partial filter when element include filter" do
    element = {'a' => 1, 'b' => 2, 'c' => '3', 'd' => ['d1', 'd2']}
    filter = {'b' => 2, 'c' => '3'}
    assert AeEasy::Test::Helper::Data.match(element, filter, exact_match: false)
  end

  it "should not match element and partial filter when diferent" do
    element = {'a' => 1, 'b' => 2, 'c' => '3', 'd' => ['d1', 'd2']}
    filter = {'b' => 2, 'c' => '4'}
    assert_operator AeEasy::Test::Helper::Data.match(element, filter, exact_match: false), :==, false
  end

  it "should match element and exact filter when equal" do
    element = {'a' => 1, 'b' => 2, 'c' => '3', 'd' => ['d1', 'd2']}
    filter = {'a' => 1, 'b' => 2, 'c' => '3', 'd' => ['d1', 'd2']}
    assert AeEasy::Test::Helper::Data.match(element, filter, exact_match: true)
  end

  it "should not match element and exact filter when diferent" do
    element = {'a' => 1, 'b' => 2, 'c' => '3', 'd' => ['d1', 'd2']}
    filter = {'a' => 1, 'b' => 2, 'c' => '3', 'd' => ['d1', 'd3']}
    assert_operator AeEasy::Test::Helper::Data.match(element, filter, exact_match: true), :==, false
  end

  it "should stringify keys correctly" do
    element = {a: 1, b: 2, c: '3', d: ['d1', 'd2']}
    stringify_keys_element = {'a' => 1, 'b' => 2, 'c' => '3', 'd' => ['d1', 'd2']}
    assert_operator AeEasy::Test::Helper::Data.stringify_keys_from(element), :==, stringify_keys_element
  end

  it "should delete keys correctly" do
    element = {'a' => 1, 'b' => 2, 'c' => '3', 'd' => ['d1', 'd2']}
    keys = ['a', 'd']
    result_element = {'b' => 2, 'c' => '3'}
    AeEasy::Test::Helper::Data.delete_keys_from! element, keys
    assert_operator element, :==, result_element
  end

  it "should sanitize raw hash correctly" do
    element = {:a => 1, 'b' => 2, 'c' => '3', :d => ['d1', 'd2'], :e => 5}
    keys = ['b', 'e']
    result_element = {'a' => 1, 'c' => '3', 'd' => ['d1', 'd2']}
    assert_operator AeEasy::Test::Helper::Data.sanitize(element, skip_keys: keys), :==, result_element
  end

  it "should deep sanitize raw hash correctly" do
    element = {:a => 1, 'b' => 2, 'c' => '3', :d => {:da => 'd1', 'db' => 'd2'}, :e => 5}
    keys = ['b', 'e']
    result_element = {'a' => 1, 'c' => '3', 'd' => {'da' => 'd1', 'db' => 'd2'}}
    assert_operator AeEasy::Test::Helper::Data.sanitize(element, skip_keys: keys), :==, result_element
  end

  it "should deep sanitize raw hash with arrays correctly" do
    element = {:a => 1, 'b' => 2, 'c' => '3', :d => [{:da => 'd1', 'db' => 'd2'}], :e => 5}
    keys = ['b', 'e']
    result_element = {'a' => 1, 'c' => '3', 'd' => [{'da' => 'd1', 'db' => 'd2'}]}
    assert_operator AeEasy::Test::Helper::Data.sanitize(element, skip_keys: keys), :==, result_element
  end

  it "should match expected_pages when equal to pages" do
    Dir.mktmpdir(nil, @temp_dir) do |input_dir|
      @write_json_to_file.call input_dir, 'pages', @sample_data[:expected_pages]
      @write_json_to_file.call input_dir, 'expected_pages', @sample_data[:expected_pages]
      data = AeEasy::Test::Helper::Data.new({
        input_absolute: true,
        input: input_dir
      })
      assert data.expected_pages_match?
    end
  end

  it "should not match expected_pages when not equal to pages" do
    Dir.mktmpdir(nil, @temp_dir) do |input_dir|
      @write_json_to_file.call input_dir, 'pages', @sample_data[:pages]
      @write_json_to_file.call input_dir, 'expected_pages', @sample_data[:expected_pages]
      data = AeEasy::Test::Helper::Data.new({
        input_absolute: true,
        input: input_dir
      })
      assert_operator data.expected_pages_match?, :==, false
    end
  end

  it "should match expected_outputs when equal to outputs" do
    Dir.mktmpdir(nil, @temp_dir) do |input_dir|
      @write_json_to_file.call input_dir, 'outputs', @sample_data[:expected_outputs]
      @write_json_to_file.call input_dir, 'expected_outputs', @sample_data[:expected_outputs]
      data = AeEasy::Test::Helper::Data.new({
        input_absolute: true,
        input: input_dir
      })
      assert data.expected_outputs_match?
    end
  end

  it "should not match expected_outputs when not equal to outputs" do
    Dir.mktmpdir(nil, @temp_dir) do |input_dir|
      @write_json_to_file.call input_dir, 'outputs', @sample_data[:outputs]
      @write_json_to_file.call input_dir, 'expected_outputs', @sample_data[:expected_outputs]
      data = AeEasy::Test::Helper::Data.new({
        input_absolute: true,
        input: input_dir
      })
      assert_operator data.expected_outputs_match?, :==, false
    end
  end

  it "should save pages by save_pages method correctly" do
    Dir.mktmpdir(nil, @temp_dir) do |input_dir|
      @write_json_to_file.call input_dir, 'expected_pages', @sample_data[:expected_pages]
      data = AeEasy::Test::Helper::Data.new({
        input_absolute: true,
        input: input_dir
      })
      data.save_pages @sample_data[:expected_pages]
      assert data.expected_pages_match?
    end
  end
end
